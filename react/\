import pathToRegexp from "path-to-regexp";

import workboxNamespace from "workbox-sw";
import reduce from "lodash/reduce";

import { DataSource } from "../datasource";

type Schema = {
  cdnUrl?: string;
  routes: {
    [endpoint: string]: EndpointDefinition;
  };
};

type EndpointDefinition = {
  [method in HTTPMethod]?: HandlerDefinition | HandlerDefinition[];
} & {
  options?: any;
};

type HandlerDefinition = {
  service: string;
  handler: string;
};

type HTTPMethod = "GET" | "POST" | "PUT" | "DELETE" | "PATCH";

importScripts(
  "https://storage.googleapis.com/workbox-cdn/releases/4.3.1/workbox-sw.js"
);

declare const workbox: typeof workboxNamespace | null;
if (!workbox) {
  throw `Boo! Workbox didn't load ðŸ˜¬`;
}

workbox.setConfig({ debug: true });

const { routing, strategies, backgroundSync } = workbox;

const API_BASE_URL = "http://localhost:8080";
const db = new DataSource();

let regexpHandlers: [RegExp, pathToRegexp.Key[]];

function createEndpoint(routeDefinition: EndpointDefinition, route: string) {
  const keys = [];
  const regexp = pathToRegexp(`${API_BASE_URL}/api${route}`, keys);
  return [regexp, keys];
}

let schema: Schema;
(async () => {
  schema = await fetch(`${API_BASE_URL}/api/schema`).then(res => res.json());
  regexpHandlers = reduce(
    schema.routes,
    (acc, routeDefinition, route) => {
      console.log(`\nEndpoint ${route} will be added`);
      return [...acc, createEndpoint(routeDefinition, route)];
    },
    []
  );
})();

routing.registerRoute(
  /.*\/api\/.*$/,
  new strategies.NetworkOnly({
    plugins: [
      new backgroundSync.Plugin("background-queue", {
        onSync: ({
          queue
        }: {
          queue: workboxNamespace.backgroundSync.Queue;
        }) => {
          console.log("wooot", queue);
        }
      }),
      // https://developers.google.com/web/tools/workbox/guides/using-plugins#custom_plugins
      {
        fetchDidFail: ({ originalRequest, request, error, event }) => {
          // No return expected.
          // NOTE: `originalRequest` is the browser's request, `request` is the
          // request after being passed through plugins with
          // `requestWillFetch` callbacks, and `error` is the exception that caused
          // the underlying `fetch()` to fail.
          console.log("yep. It failed. What will we do with it?", {
            originalRequest,
            request,
            error,
            event
          });
          console.log("event.respondWith might be the answer!");
          event.respondWith((async () => new Response())());
        }
      }
    ]
  })
);
